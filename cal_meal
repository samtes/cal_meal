#!/usr/bin/env ruby

$LOAD_PATH << "lib"
$LOAD_PATH << "models"

require 'environment'
Environment.environment = ENV["ENVIRONMENT"] || "production"
$stderr = $stdout

require 'smart_colored/extend'
require 'person'
require 'diet'

def main_menu
<<EOS
What do you want to do? (Enter the number for your choice)
1. Create a Diet Cal.
2. View your Diet Cal.
3. Edit your Diet Cal.
4. Delete your Diet Cal.
EOS
end

def select_diet_menu
<<EOS
Select the type of diet (Enter the number for your choice)
1. Vegeterian
2. Vegan
3. Full
EOS
end

def sub_menu_1
<<EOS
How many meals a day? (Enter the number between 3 and 9)
EOS
end

def menu_2_first_name
<<EOS
Enter your firstname (Example <Sam>)
EOS
end

def menu_2_passcode
<<EOS
Enter your passcode (Example <1234>)
EOS
end


def diet_type(i)
  types = ["Vegeterian", "Vegan", "Full"]
  types[i-1].capitalize
end

def generate_meal_menu(diet, person)
  puts sub_menu_1
  diet_num = gets
  return unless diet_num
  diet_num.chomp!
  if diet_num && diet_num.to_i > 2 && diet_num.to_i < 9
    type = diet_type(diet)
    diet = Diet.new(person.id, type, diet_num.to_i)
    if diet.save
      puts "#{diet_num} #{type} meal diet added and your passcode is #{person.id}.".green
    end
  else
    puts "'#{diet_num}' is not a valid entry. Enter a number between 3 and 9.".red
    generate_meal_menu(diet, person)
  end
end

def add_user
  puts menu_2_first_name
  first_name = gets
  return unless first_name
  first_name.chomp!
  person = Person.new(first_name)
  if person.save
    puts "#{first_name} has been added.".green
    generate_create_menu(person)
  else
    puts person.errors.join.red
    add_user
  end
end

def generate_enter_passcode(person, i)
  puts menu_2_passcode
  passcode = gets
  return unless passcode
  passcode.chomp!
  if person.id == passcode.to_i
    diet = Diet.find_by_id(person.id)
    if i == 2
      view_diet(person, diet)
    elsif i == 3
      edit_diet_menu(person, diet)
    else
      delete_record(person, diet)
    end
  else
    puts "Invalid passcode.".red
    generate_enter_passcode(person, i)
  end
end

def update_person(person, diet)
  puts "Enter new first name"
  new_first_name = gets
  return unless new_first_name
  new_first_name.chomp!
  person.name = new_first_name
  if person.save
    puts "First name had been updated to #{new_first_name.capitalize}."
    show_second_edit(person, diet)
  else
    puts person.errors.join.red
    update_person(person)
  end
end

def update_diet(person, diet)
  puts select_diet_menu
  user_select = gets
  return unless user_select
  user_select.chomp!
  if user_select.length < 1 || user_select.to_i < 2 || user_select.to_i > 3
    puts "'#{user_select}' is an incorrect selection! Please enter 1, 2 or 3".red
    update_diet(person, diet)
  else
    generate_meal_menu2(user_select.to_i, person, diet)
  end
end

def generate_meal_menu2(num, person, diet)
  puts sub_menu_1
  diet_num = gets
  return unless diet_num
  diet_num.chomp!
  if diet_num.to_i > 2 && diet_num.to_i < 9
    diet.type = diet_type(num)
    diet.freq = diet_num.to_i
    if diet.update
      puts "Diet has been updated to: #{diet_type(num)} and Frequency: #{diet_num}.".green
    else
      puts diet.errors.join.red
      generate_meal_menu2(num, person, diet)
    end
  else
    puts "'#{diet_num}' is an incorrect entry. Enter a number between 3 and 9.".red
    generate_meal_menu2(num, person, diet)
  end
end

def edit_diet_menu(person, diet)
  puts "Name: #{person.name.capitalize}".yellow
  puts "Diet: #{diet.type.capitalize} diet.".yellow
  puts "Frequency: #{diet.freq} meals a day.".yellow
  puts "Enter 1 to edit name, if not hit enter."
  input = gets
  return unless input
  input.chomp!
  if input.to_i == 1
    update_person(person, diet)
  elsif input.length > 0 && input.to_i != 1
    puts "'#{input}' is an incorrect selection. Enter 1 to edit or enter to pass.".red
    edit_diet_menu(person, diet)
  else
    puts "Name: #{person.name.capitalize}".yellow
    puts "Diet: #{diet.type.capitalize} diet.".yellow
    puts "Frequency: #{diet.freq} meals a day.".yellow
    show_second_edit(person, diet)
  end
end

def show_second_edit(person, diet)
  puts "Enter 2 to edit diet type, if not hit enter"
  input_2 = gets
  return unless input_2
  input_2.chomp!
  if input_2.to_i == 2
    update_diet(person, diet)
  elsif input_2.length > 0 && input_2.to_i != 2
    puts "'#{input_2}' is an incorrect selection. Enter 2 to edit or enter to pass.".red
    show_second_edit(person, diet)
  else
    puts "Diet has not been edited.".yellow
  end
end

def delete_record(person, diet)
  puts "Enter 1 to delete user.. 2 to delete user and diet"
  input = gets
  return unless input
  input.chomp!
  if input.to_i == 1
    if person.delete
      puts "'#{person.name}' has been deleted."
    end
  elsif input.to_i == 2
    if person.delete && diet.delete
      puts "User #{person.name} and associated diet has been deleted."
    end
  else
    puts "'#{input}' in an invalid entry. Select 1 or 2".red
    delete_record(person, diet)
  end
end

def view_diet(person, diet)
  puts "Name: #{person.name.capitalize}".yellow
  puts "Diet: #{diet.type.capitalize} diet.".yellow
  puts "Frequency: #{diet.freq} meals a day.".yellow
  puts "**************************************".red
  puts " SELECT YOUR MEAL FROM THE LIST BELOW".green
  puts "**************************************".red
  diet.detail.split(", ").each{|meal| puts meal.yellow}
  nil
end

def generate_enter_name_menu_1(i)
  puts menu_2_first_name
  first_name = gets
  return unless first_name
  first_name.chomp!
  person = Person.find_by_name(first_name)
  if person
    generate_enter_passcode(person, i)
  else
    puts "'#{first_name}' is not a valid user.".red
    generate_enter_name_menu_1(i)
  end
end

def generate_enter_name_menu_2
  puts menu_2_first_name
  first_name = gets
  return unless first_name
  first_name.chomp!
  person = Person.find_by_name(first_name)
  if person
    generate_enter_passcode(person)
  else
    puts "'#{first_name}' is not a valid user.".red
    generate_enter_name_menu_2
  end
end

def generate_create_menu(person)
  puts select_diet_menu
  user_select = gets
  return unless user_select
  user_select.chomp!
  if user_select.length < 1 || user_select.to_i < 1 || user_select.to_i > 3
    result = "'#{user_select}' is an incorrect selection! Please enter 1, 2 or 3".red
    puts result
    generate_create_menu(person)
  else
    generate_meal_menu(user_select.to_i, person)
  end
end

def generate_main_menu
  puts main_menu
  user_input = gets
  return unless user_input
  user_input.chomp!
  if user_input.length < 1 || user_input.to_i < 1 || user_input.to_i > 4
    result = "'#{user_input}' is an incorrect selection! Please enter 1, 2, 3 or 4".red
    puts result
    generate_main_menu
  elsif user_input.to_i == 1
    add_user
  elsif user_input.to_i == 2
    generate_enter_name_menu_1(2)
  elsif user_input.to_i == 3
    generate_enter_name_menu_1(3)
  else
    generate_enter_name_menu_1(4)
  end
end

puts generate_main_menu
